{"version":3,"sources":["logo.svg","components/dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Dashboard","props","checkKey","e","state","n","i","j","stepsCount","window","event","keyCode","console","log","OParray","outputArray","change","push","setState","changeGrid","count","temp","temp2","boxArray","boxNumber","selectedBox","arrayObject","_submit","a","async","parseInt","gridInput","m","_NChange","bind","_MChange","this","addEventListener","target","value","className","type","onChange","onClick","style","marginTop","fontSize","JSON","stringify","Array","map","data","index","display","flexDirection","key","slice","backgroundColor","removeEventListener","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.68e2b9ea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nclass Dashboard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            n: 5,\n            m: 8,\n            gridInput: 5,\n            arrayObject: [],\n            selectedBox: 3,\n            i: 0, j: 0,\n            outputArray: [[0, 0]],\n            stepsCount: 0\n        }\n        this._NChange = this._NChange.bind(this);\n        this._MChange = this._MChange.bind(this);\n    }\n\n    componentDidMount() {\n        this.changeGrid()\n        window.addEventListener('keydown', this.checkKey)\n    }\n\n    checkKey = (e) => {\n        const { n, i, j, stepsCount } = this.state\n        e = e || window.event;\n        if (e.keyCode == '37') {\n            if (j - 1 >= 0) {\n                console.log('left');\n                var OParray = this.state.outputArray;\n                var change = this.state.j - 1\n                OParray.push([this.state.i, change])\n                this.setState({ outputArray: OParray, j: change, stepsCount: stepsCount + 1 })\n                // this.setState({ j: change })\n                this.changeGrid()\n            }\n\n        }\n        else if (e.keyCode == '38') {\n            console.log('up');\n            if (i - 1 >= 0) {\n                var OParray = this.state.outputArray;\n                var change = this.state.i - 1\n                OParray.push([change, this.state.j])\n                this.setState({ outputArray: OParray, i: change, stepsCount: stepsCount + 1 })\n                // this.setState({ i: change })\n                this.changeGrid()\n            }\n\n        }\n        else if (e.keyCode == '39') {\n            if (j + 1 < n) {\n                console.log('right');\n                var OParray = this.state.outputArray;\n                var change = this.state.j + 1\n                OParray.push([this.state.i, change])\n                this.setState({ outputArray: OParray, j: change, stepsCount: stepsCount + 1 })\n                // this.setState({ j: change })\n                this.changeGrid()\n            }\n\n        }\n        else if (e.keyCode == '40') {\n            if (i + 1 < n) {\n                console.log('down');\n                var OParray = this.state.outputArray;\n                var change = this.state.i + 1\n                OParray.push([change, this.state.j])\n                this.setState({ outputArray: OParray, i: change, stepsCount: stepsCount + 1 })\n                // this.setState({ i: change })\n                this.changeGrid()\n            }\n\n        }\n    }\n\n    changeGrid = () => {\n        var count = 0;\n        var temp = [];\n        var temp2 = [];\n        for (let i = 0; i < this.state.n; i++) {\n            for (let j = 0; j < this.state.n; j++) {\n                count++;\n                // console.log(i + ' ' + j)\n                temp = {\n                    boxArray: [i, j],\n                    boxNumber: count,\n                    selectedBox: (i === this.state.i && j === this.state.j) ? true : false\n                }\n\n                temp2.push(temp)\n                // console.log(temp)\n            }\n        }\n        // console.log(temp2)\n        this.setState({ arrayObject: temp2 })\n    }\n\n    _NChange(e) {\n        this.setState({ gridInput: e.target.value, outputArray: [] });\n    }\n    _MChange(e) {\n        this.setState({ m: parseInt(e.target.value), outputArray: [] });\n    }\n\n    _submit = async () => {\n        await this.setState({ outputArray: [], i: 0, j: 0, n: parseInt(this.state.gridInput), })\n        await this.changeGrid()\n    }\n\n    render() {\n        return (\n            <div className='main'>\n                <div className='formContainer'>\n                    <div className='innerContainer' >\n                        <text>grid (n):&nbsp;&nbsp;</text>\n                        <input\n                            type=\"number\"\n                            value={this.state.gridInput}\n                            onChange={this._NChange} />\n                    </div>\n                    <div>\n                        <text>No. of steps (m): </text>\n                        <input\n                            type=\"number\"\n                            value={this.state.m}\n                            onChange={this._MChange}\n                        />\n\n                    </div>\n                    <button onClick={this._submit} className='submitBtn'>Submit</button>\n                </div>\n                <text style={{ marginTop: '3rem' }}> &nbsp;{this.state.n + \" X \" + this.state.n}</text>\n                <text  > &nbsp;{\"No. of Steps: \" + this.state.stepsCount}</text>\n                <text style={{ fontSize: 12 }}>Block Traversed: {JSON.stringify(this.state.outputArray)}</text>\n                <table className='tableGrid'>\n\n                    <tbody>\n                        {[...Array(this.state.n + 1)].map((data, index) =>\n                            <div style={{ display: 'flex', flexDirection: 'row' }} key={index}>\n                                {this.state.arrayObject\n                                    .slice(((this.state.n * index) - this.state.n), this.state.n * index).map((data, index) =>\n                                        <div\n                                            key={index}\n                                            className='boxGrid'\n                                            style={{\n                                                backgroundColor: data.selectedBox === true ? 'yellow' : '#FFFFFF'\n                                            }}\n                                        >\n                                            {data.boxNumber}\n                                        </div>\n                                    )}\n                            </div>\n                        )}\n                    </tbody>\n                </table>\n\n                {this.state.m === this.state.stepsCount\n                    ?\n                    (\n                        window.removeEventListener('keydown', this.checkKey),\n                        <text>OUTPUT: {JSON.stringify(this.state.outputArray)}</text>)\n                    :\n                    null\n                }\n                {/* <text>OUTPUT: {JSON.stringify(this.state.outputArray)}</text> */}\n            </div>\n        )\n    }\n}\nexport default Dashboard;","import logo from './logo.svg';\nimport './App.css';\nimport Dashboard from './components/dashboard/Dashboard'; \n\nimport React, { Component } from 'react'\n\nclass App extends Component {\n  render() {\n    return (\n      <Dashboard/>\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}