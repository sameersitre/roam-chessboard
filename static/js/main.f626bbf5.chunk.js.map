{"version":3,"sources":["logo.svg","components/dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Dashboard","props","checkKey","e","window","event","keyCode","console","log","OParray","state","outputArray","change","j","push","i","setState","changeGrid","count","temp","temp2","n","boxArray","boxNumber","selectedBox","arrayObject","_submit","parseInt","gridInput","m","handleChange","bind","addEventListener","this","target","value","className","type","onChange","numberOfGuests","onClick","Array","map","data","index","style","display","flexDirection","key","slice","backgroundColor","JSON","stringify","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f626bbf5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nclass Dashboard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            n: 0,\n            m: 20,\n            gridInput: 3,\n            arrayObject: [],\n            selectedBox: 3,\n            i: 0, j: 0,\n            outputArray: []\n        }\n        this.handleChange = this.handleChange.bind(this);\n    }\n    componentDidMount() {\n        // this.changeGrid()\n        window.addEventListener('keydown', this.checkKey)\n    }\n    checkKey = (e) => {\n        e = e || window.event;\n\n        if (e.keyCode == '37') {\n            console.log('left');\n            var OParray = this.state.outputArray;\n            var change = this.state.j - 1\n            OParray.push([this.state.i, change])\n            this.setState({ outputArray: OParray })\n            this.setState({ j: change })\n            this.changeGrid()\n        }\n        else if (e.keyCode == '38') {\n            console.log('up');\n            var OParray = this.state.outputArray;\n            var change = this.state.i - 1\n            OParray.push([change, this.state.j])\n            this.setState({ outputArray: OParray })\n            this.setState({ i: change })\n            this.changeGrid()\n        }\n        else if (e.keyCode == '39') {\n            console.log('right');\n            var OParray = this.state.outputArray;\n            var change = this.state.j + 1\n            OParray.push([this.state.i, change])\n            this.setState({ outputArray: OParray })\n            this.setState({ j: change })\n            this.changeGrid()\n        }\n        else if (e.keyCode == '40') {\n            console.log('down');\n            var OParray = this.state.outputArray;\n            var change = this.state.i + 1\n            OParray.push([change, this.state.j])\n            this.setState({ outputArray: OParray })\n            this.setState({ i: change })\n            this.changeGrid()\n        }\n    }\n\n    changeGrid = ()=> {\n        var count = 0;\n        var temp = [];\n        var temp2 = [];\n        for (let i = 0; i < this.state.n; i++) {\n            for (let j = 0; j < this.state.n; j++) {\n                count++;\n                // console.log(i + ' ' + j)\n                temp = {\n                    boxArray: [i, j],\n                    boxNumber: count,\n                    selectedBox: (i === this.state.i && j === this.state.j) ? true : false\n                }\n                temp2.push(temp)\n                // console.log(temp)\n            }\n        }\n        // console.log(temp2)\n        this.setState({ arrayObject: temp2 })\n    }\n\n    handleChange(e) {\n        this.setState({ gridInput: e.target.value,outputArray: [] });\n    }\n\n    _submit = () => {\n        this.setState({outputArray: [], i:0,j:0, n: parseInt(this.state.gridInput),  })\n        this.changeGrid()\n    }\n\n    render() {\n        return (\n            <div className='main'>\n                <div className='formContainer'>\n                    <div>\n                        <text>grid (n): </text>\n                        <input\n                            type=\"number\"\n                            value={this.state.gridInput}\n                            onChange={this.handleChange} />\n                    </div>\n                    <div>\n                        <text>No. of steps (m): </text>\n                        <input\n                            type=\"number\"\n                            value={this.state.numberOfGuests}\n                        // onChange={this.handleInputChange}\n                        />\n                    </div>\n                    <button onClick={this._submit}>Submit</button>\n                </div>\n\n                <table className='tableGrid'>\n                    <tbody>\n                        {[...Array(this.state.n + 1)].map((data, index) =>\n                            <div style={{ display: 'flex', flexDirection: 'row' }} key={index}>\n                                {this.state.arrayObject\n                                    .slice(((this.state.n * index) - this.state.n), this.state.n * index).map((data, index) =>\n                                        <div\n                                            key={index}\n                                            className='boxGrid'\n                                            style={{\n                                                backgroundColor: data.selectedBox === true ? 'yellow' : '#FFFFFF'\n                                            }}\n                                        >\n                                            {data.boxNumber}\n                                        </div>\n                                    )}\n                            </div>\n                        )}\n                    </tbody>\n                </table>\n                <text>OUTPUT: {JSON.stringify(this.state.outputArray)}</text>\n\n            </div>\n        )\n    }\n}\nexport default Dashboard;","import logo from './logo.svg';\nimport './App.css';\nimport Dashboard from './components/dashboard/Dashboard'; \n\nimport React, { Component } from 'react'\n\nclass App extends Component {\n  render() {\n    return (\n      <Dashboard/>\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}